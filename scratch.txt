

AD extract
csvde -f users.csv -r "(&(objectClass=user)(objectCategory=person)(!userAccountControl:1.2.840.113556.1.4.803:=2))" -l sn,givenName,mail

(&(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=2))
(&(objectCategory=person)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=2))

use bam


43: emp #
117: email

algorithm
---------
inventory with blank email ->
	tokenize name on [\s,], lowercase into new field
	
	{ service, name, { nametoken, nametoken, nametoken, ... } }
	...
	DONE (during load)
	
(inventory with blank email) x (name tokens) ->
	match ad firstname || match ad lastname
	
	{ service, name, nametoken, [ { ad1, matchval }, { ad2, matchval } ] }
	...
	
	repeat on HR data
	
(partial matches) -> similarity algorithm
	{ service, name, addn, similarity }
	...
	
(rank)


 db.inventory.aggregate([ { $match : { name : 'John Smith', email : ''}}, { $unwind : "$names" }, {$lookup : {from:'adUsers',localField:'names',foreignField:'lastname',as:'adUser'}}, {$lookup:{from:'adUsers',localField:'names',foreignField:'firstname',as:'adUser'}},{$project : {'name':1, 'adUser':1}}, {$unwind : "$adUser"}, { $group : { _id : "$name" }}])
{ "_id" : "John Smith" }
>


dbload.js
crossmatch queries
score.js
export gen queries
mongoexport --db temnames --collection employeeout --out /out/employee
mongoexport --db temnames --collection emailout --out /out/email.json

docker run --detach --rm -p 27017:27017  --name db mongo